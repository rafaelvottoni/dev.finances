/* no css, as coisas tem valores, por exemplo o asterisco tem menos valor do que o h1 */

/* Global =================================== */

:root {
  /*root referencia a tag html*/
  --dark-blue: #363f5f;
  --green: #49aa26;
  --light-green: #3dd705;
  --red: #e92929;
  /*criando uma variavel posso apenas chamar ela depois, a vantagem é poder mudar depois sem ter que mudar em cada elemento*/
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 93.75%;
  /* 15px */
}

body {
  background: #f0f2f5;
  font-family: 'Poppins', sans-serif;
}

.sr-only {
  /*ele usa esse truque para que as palavras com essa classe fique invisiveis para a visão, mas que os leitores de tela ainda possam acha-las e ler, para pessoas com dificuldades visuais. se usasse display: none o leitor de tela não consegue achar, todos esses codigos são para isso*/
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.container {
  width: min(90vw, 800px);
  /*essa função procurar o menor valor entre os dois argumentos que eu passo */
  margin: auto;
}

/* Titles =================================== */

h2 {
  margin-top: 3.2rem;
  margin-bottom: 0.8rem;
  color: var(--dark-blue);
  font-weight: normal;
}

/* Links & Buttons ========================== */

a {
  color: var(--green);
  text-decoration: none;
}

a:hover {
  color: var(--light-green);
}

button {
  width: 100%;
  height: 50px;
  border: none;
  color: white;
  background: var(--green);
  padding: 0;
  border-radius: 0.25rem;
  cursor: pointer;
}

button:hover {
  background: var(--light-green);
}

.button.new {
  /*Se eu coloco .button com um espaço eu coloco a .new, eu to dizendo para procurar dentro da .button algo com o nome .new, se eu coloco .button.new tudo junto eu to dizendo que eu quero a coisa que tem ao mesmo tempo o nome button e o nome new*/
  display: inline-block;
  margin-bottom: 0.8rem;
}

.button.cancel {
  color: var(--red);
  border: 2px var(--red) solid;
  border-radius: 0.25rem;
  height: 50px;
  opacity: 0.6;
  /*Alinhar ao meio*/
  display: flex;
  align-items: center;
  justify-content: center;
}

.button.cancel:hover {
  opacity: 1;
}

/* Header =================================== */

header {
  background: #2d4a22;
  padding: 2rem 0 10rem;
  text-align: center;
}

#logo {
  color: #fff;
  font-weight: 100;
}

/* Balance =================================== */

#balance {
  margin-top: -5.5rem;
}

#balance h2 {
  color: white;
  margin-top: 0;
}

/* Cards =================================== */

.card {
  background: white;
  padding: 1.5rem 2rem;
  border-radius: 0.25rem;
  margin-bottom: 2rem;
  color: var(--dark-blue);
}

.card h3 {
  /*coisas importantes sobre posicionamento, align-items e justify-content*/
  font-weight: normal;
  font-size: 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.card p {
  font-size: 2rem;
  line-height: 3rem;
  margin-top: 1rem;
}

.card.total {
  /*Posso chamar duas classes de uma vez, ai coloco os pontos como ai no .card.total */
  background: var(--green);
  color: white;
}

.card.total.negative {
  background: var(--red);
  color: white;
}

/* Table =================================== */

#transaction {
  display: block;
  width: 100%;
  overflow-x: auto;
}

#data-table {
  width: 100%;
  border-spacing: 0 0.5rem;
  color: #969cb3;
  /*o comando a baixo diz: se for necessario criar a barra de rolagem no eixo x */
}

table thead tr th:first-child,
table tbody tr td:first-child {
  /*Esse seletor pega o primeiro filho que está dentro do thead*/
  border-radius: 0.25rem 0 0 0.25rem;
}

table thead tr th:last-child,
table tbody tr td:last-child {
  /*Esse seletor pega o ultimo filho que está dentro do thead*/
  border-radius: 0 0.25rem 0.25rem 0;
}

table thead th {
  background: white;
  font-weight: normal;
  padding: 1rem 2rem;
  text-align: left;
}

table tbody tr {
  opacity: 0.7;
}

table tbody tr:hover {
  opacity: 1;
}

table tbody td {
  background: white;
  padding: 1rem 2rem;
}

td.description {
  color: var(--dark-blue);
}

td.income {
  color: #12a454;
}

td.expense {
  color: #e92929;
}

/* modal ==================================== */

.modal-overlay {
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.7);
  position: fixed;
  top: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  visibility: hidden;
  z-index: 999;
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal {
  background: #f0f2f5;
  padding: 2.4rem;
  position: relative;
  z-index: 1;
}

/* Form ===================================== */

#form {
  max-width: 500px;
}

#form h2 {
  margin-top: 0;
}

input {
  border: none;
  border-radius: 0.2rem;
  padding: 0.8rem;
  width: 100%;
}

.input-group {
  margin-top: 0.8rem;
}

.input-group small {
  opacity: 0.4;
}

.input-group.actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.input-group.actions .button,
.input-group.actions button {
  width: 48%;
}

/* Footer =================================== */

footer {
  text-align: center;
  padding: 4rem 0 2rem;
  color: var(--dark-blue);
  opacity: 0.6;
}

/* Responsive ================================ */

@media (min-width: 800px) {
  /* o min signfica: a partir de 800px aplique essas configuraçoes, de 800 pra baixo vc usa o normal*/
  html {
    font-size: 87.5%;
  }
  #balance {
    /* display grid é muito bom para alinhar, como coloquei uma fraçao pra cada um, eles vao ficar iguais, mas pode variar colocar 2fr 1fr e fr por exemplo*/
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 2rem;
  }
}
